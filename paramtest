from params_base import ParametersBase


class Parameters(ParametersBase):
    """
    Concrete implementation of ParametersBase.
    Stores parameters as private variables with strict encapsulation.
    """

    def __init__(self):
        # Private variables for each parameter (name-mangled with __)
        self.__github_token = None
        self.__repo_name = None
        self.__repo_description = None
        self.__organization_name = None

    def set_params(self, **kwargs):
        """
        Sets parameters dynamically from user input.
        :param kwargs: Dictionary of parameter values.
        """
        for key, value in kwargs.items():
            attr_name = f"_{self.__class__.__name__}__{key}"  # Name mangling
            if hasattr(self, attr_name):
                setattr(self, attr_name, value)
            else:
                raise KeyError(f"Invalid parameter: {key}")

    def get_param(self, key: str):
        """
        Retrieves the value of a parameter by key.
        :param key: Name of the parameter.
        :return: Value of the parameter.
        """
        attr_name = f"_{self.__class__.__name__}__{key}"  # Name mangling
        if hasattr(self, attr_name):
            value = getattr(self, attr_name)
            if value is None:
                raise ValueError(f"Parameter '{key}' is not set.")
            return value
        else:
            raise ValueError(f"Parameter '{key}' is not defined.")
